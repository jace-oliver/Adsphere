"use client";

import React, { useMemo, useRef, useState, useEffect } from "react";
import * as THREE from "three";
import { Canvas, useFrame } from "@react-three/fiber";
import { OrbitControls, Sphere, Html } from "@react-three/drei";

type IslandId = "entertainment" | "product" | "clothing";

const ISLANDS: Record<IslandId, { name: string; color: string; anchor: {lat:number;lon:number} }> = {
  entertainment: { name: "Entertainment Nation", color: "#4dabf7", anchor: { lat: 15, lon: 0 } },
  product: { name: "Product Peninsula", color: "#51cf66", anchor: { lat: -25, lon: -100 } },
  clothing: { name: "Clothing Continent", color: "#ff6b6b", anchor: { lat: 25, lon: 140 } },
};

type Ad = {
  id: string;
  title: string;
  creator: string;
  url: string;
  island: IslandId;
  lat: number;
  lon: number;
};

function latLonToCartesian(radius: number, latDeg: number, lonDeg: number) {
  const lat = (latDeg * Math.PI) / 180;
  const lon = (lonDeg * Math.PI) / 180;
  const x = radius * Math.cos(lat) * Math.cos(lon);
  const y = radius * Math.sin(lat);
  const z = radius * Math.cos(lat) * Math.sin(lon);
  return [x, y, z] as const;
}

function useSpin(ref: React.RefObject<THREE.Group | null>) {
  useFrame((_, dt) => {
    if (ref.current) ref.current.rotation.y += dt * 0.05; // subtle idle spin
  });
}

function IslandLabels({ radius }: { radius: number }) {
  return (
    <group>
      {Object.entries(ISLANDS).map(([id, meta]) => {
        const p = latLonToCartesian(radius + 0.2, meta.anchor.lat, meta.anchor.lon);
        return (
          <group key={id} position={p as any}>
            <Html center>
              <div
                className="px-3 py-1 rounded-full text-sm font-bold border"
                style={{ background: `${meta.color}22`, borderColor: meta.color }}
              >
                {meta.name}
              </div>
            </Html>
          </group>
        );
      })}
    </group>
  );
}

function Markers({
  radius,
  ads,
  selectedId,
  onPick,
}: {
  radius: number;
  ads: Ad[];
  selectedId: string | null;
  onPick: (id: string) => void;
}) {
  return (
    <group>
      {ads.map((ad) => {
        const pos = latLonToCartesian(radius + 0.06, ad.lat, ad.lon);
        const islandCol = ISLANDS[ad.island].color;
        const active = selectedId === ad.id;
        return (
          <group key={ad.id} position={pos as any}>
            <mesh
              onClick={(e) => {
                e.stopPropagation();
                onPick(ad.id);
              }}
              onPointerOver={(e) => {
                e.stopPropagation();
                document.body.style.cursor = "pointer";
              }}
              onPointerOut={() => (document.body.style.cursor = "auto")}
            >
              <sphereGeometry args={[active ? 0.16 : 0.12, 24, 24]} />
              <meshStandardMaterial color={islandCol} emissive={islandCol} emissiveIntensity={0.55} />
            </mesh>
            <Html center distanceFactor={10}>
              <div
                className={`px-2 py-1 rounded-full text-xs font-semibold shadow ${active ? "bg-white text-black" : "bg-black/70 text-white"}`}
              >
                {ad.title}
              </div>
            </Html>
          </group>
        );
      })}
    </group>
  );
}

function LeftPopup({ ad, onClose }: { ad: Ad | null; onClose: () => void }) {
  return (
    <div className="h-full w-full p-4 flex flex-col gap-4">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-bold">{ad ? ad.title : "Select a marker"}</h2>
        {ad && (
          <button onClick={onClose} className="px-3 py-1 rounded-xl bg-gray-200 hover:bg-gray-300 text-sm">
            Close
          </button>
        )}
      </div>
      {ad ? (
        <div className="space-y-3">
          <div className="text-sm text-gray-600">by {ad.creator}</div>
          <a
            href={ad.url}
            target="_blank"
            rel="noreferrer"
            className="inline-flex items-center gap-2 px-4 py-2 rounded-xl bg-black text-white text-sm"
          >
            Open Link
          </a>
          <div className="text-xs text-gray-500">Island: {ISLANDS[ad.island].name}</div>
        </div>
      ) : (
        <div className="text-sm text-gray-600">Click a glowing dot on the sphere to open details here.</div>
      )}
      <div className="mt-auto pt-2 border-t text-xs text-gray-500">MVP • Drag to rotate • Scroll to zoom • Click a dot</div>
    </div>
  );
}

export default function Explorer() {
  const [ads, setAds] = useState<Ad[]>([]);
  const [selectedId, setSelectedId] = useState<string | null>(null);
  const selected = useMemo(() => ads.find((a) => a.id === selectedId) || null, [ads, selectedId]);

  useEffect(() => {
    (async () => {
      const res = await fetch("/api/ads");
      const data = await res.json();
      setAds(data.items || []);
    })();
  }, []);

  const radius = 3.2;
  const groupRef = useRef<THREE.Group>(null!);
  useSpin(groupRef);

  return (
    <div className="h-screen w-screen grid grid-cols-1 lg:grid-cols-3 bg-white text-black">
      {/* Left pop-up */}
      <div className="order-2 lg:order-1 col-span-1 bg-white border-r">
        <LeftPopup ad={selected} onClose={() => setSelectedId(null)} />
      </div>

      {/* Sphere viewport */}
      <div className="order-1 lg:order-2 col-span-2 relative bg-gradient-to-b from-slate-100 to-slate-300">
        <Canvas camera={{ position: [0, 0, 9], fov: 50 }}>
          <OrbitControls
            enableZoom
            enableRotate
            enablePan={false}
            enableDamping
            dampingFactor={0.05}
            minDistance={5}
            maxDistance={12}
          />
          <group ref={groupRef}>
            <Sphere args={[radius, 96, 96]}>
              <meshPhysicalMaterial
                color="#ffffff"
                roughness={0.05}
                metalness={0.2}
                clearcoat={1}
                clearcoatRoughness={0.1}
              />
            </Sphere>
            <IslandLabels radius={radius} />
            <Markers radius={radius} ads={ads} selectedId={selectedId} onPick={setSelectedId} />
            <ambientLight intensity={0.9} />
            <directionalLight position={[6, 6, 8]} intensity={1.2} />
          </group>
        </Canvas>
        <div className="absolute top-4 right-4 bg-black/60 text-white backdrop-blur px-3 py-2 rounded-xl text-sm">
          <div className="font-semibold">Interactive Marketing Sphere</div>
          <div className="text-xs opacity-80">Drag to rotate • Scroll to zoom • Click a dot</div>
        </div>
      </div>
    </div>
  );
}
